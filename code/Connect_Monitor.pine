// === LICENSE ===

// PROPRIETARY LICENSE AGREEMENT

// This script is the proprietary property of Azullian (DBITS BV) and is protected by copyright, trade secret, and other intellectual property laws.
// All rights reserved. No rights or permissions are granted or implied by the provision, dissemination, or accidental receipt of this script.

// PROPRIETARY WEIGHT SYSTEM:
// The script incorporates Azullian (DBITS BV) weight system. The conceptual framework, algorithms, methodologies, and implementation of this weight system are the exclusive intellectual property of Azullian (DBITS BV). 
// Any unauthorized use, reproduction, or imitation of this weight system, whether in whole or in part, is strictly prohibited.

// STRICTLY PROHIBITED USES:
// 1. You may NOT, under any circumstances, modify, copy, reproduce, republish, upload, post, transmit, or distribute this script in any way.
// 2. You may NOT sell, rent, sublicense, or otherwise commercially exploit this script.
// 3. You may NOT decompile, reverse engineer, disassemble, or otherwise attempt to derive the source code of this script.

// DISCLAIMER:
// This script is provided "as-is" without any warranties of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement.
// Azullian (DBITS BV) will not be liable for any damages or losses arising out of the use or inability to use this script.

// For inquiries or permission requests, please contact finance@azullian.com.


// Â© azullian

// === VERSION ===

//@version=5

// === DECLARATIONS ===

indicator("Signal Monitor / Connectable [Azullian]", shorttitle="Signal Monitor / Connectable [Azullian]", overlay=false, max_bars_back=4900, explicit_plot_zorder=true)

// === IMPORTS ===

import azullian/azLibConnector/1 as azconnector

// === CONSTANTS ===

// â€”â€”â€”â€”â€” Constants: Plot Modes
var PLOTSIGNALS                             = "Signals IN"

// â€”â€”â€”â€”â€” Constants: Labels and Tips - Signal Inputs
var GRP_SIGNAL_INPUTS                       = "SIGNAL INPUTS"
var LBL_CONNECTOR1                          = "1â†’"
var LBL_CONNECTOR2                          = "2â†’"
var LBL_CONNECTOR3                          = "3â†’"
var LBL_CONNECTOR_SOURCE                    = ""
var TIP_SIGNAL_INPUTS                       = "â†’: Connector. Important! Connect here with the latest Connector from your Indicator Connector Chain to start receiving Signals."

// â€”â€”â€”â€”â€” Constants: Labels and Tips - Visuals
var GRP_VISUALS                             = "VISUALS"
var LBL_VISUALS_BRIGHTNESS                  = "â˜¼"
var LBL_VISUALS_COLOR_ES                    = "ðŸ¡“"
var LBL_VISUALS_COLOR_XS                    = "â­³"
var TIP_VISUALS_SHORT                       = "â˜¼: Brightness % / ðŸ¡“: ES Color / â­³: XS Color"

var LBL_VISUALS_MODE                        = "âŒ¥"
var LBL_VISUALS_COLOR_EL                    = "ðŸ¡‘"
var LBL_VISUALS_COLOR_XL                    = "â­±"
var TIP_VISUALS_LONG                        = "âŒ¥: Plot mode / ðŸ¡‘: EL Color / â­±: XL Color"

// â€”â€”â€”â€”â€” Constants: Defaults - Signal Inputs
var CONNECTOR_ENABLED_DEFAULT               = false

// â€”â€”â€”â€”â€” Constants: Defaults - Visuals
var VISUALS_BRIGHTNESS_DEFAULT              = 100
var VISUALS_BRIGHTNESS_MIN                  = 0
var VISUALS_BRIGHTNESS_MAX                  = 100
var VISUALS_BRIGHTNESS_STEP                 = 10
var VISUALS_COLOR_ES_DEFAULT                = color.rgb(233, 30, 99)
var VISUALS_COLOR_XS_DEFAULT                = color.rgb(125, 0, 67)

var VISUALS_MODE_DEFAULT                    = PLOTSIGNALS
var VISUALS_COLOR_EL_DEFAULT                = color.rgb(38, 166, 154)
var VISUALS_COLOR_XL_DEFAULT                = color.rgb(0, 73, 75)

// === INPUTS ===

// â€”â€”â€”â€”â€” Inputs: Indicator Input Settings
i_connector1Enabled = input.bool(title=LBL_CONNECTOR1, defval=CONNECTOR_ENABLED_DEFAULT, inline=LBL_CONNECTOR1, group=GRP_SIGNAL_INPUTS)
i_connector1 = input.source(title=LBL_CONNECTOR_SOURCE, defval=close, inline=LBL_CONNECTOR1, group=GRP_SIGNAL_INPUTS, tooltip=TIP_SIGNAL_INPUTS)

i_connector2Enabled = input.bool(title=LBL_CONNECTOR2, defval=CONNECTOR_ENABLED_DEFAULT, inline=LBL_CONNECTOR2, group=GRP_SIGNAL_INPUTS)
i_connector2 = input.source(title=LBL_CONNECTOR_SOURCE, defval=close, inline=LBL_CONNECTOR2, group=GRP_SIGNAL_INPUTS, tooltip=TIP_SIGNAL_INPUTS)

i_connector3Enabled = input.bool(title=LBL_CONNECTOR3, defval=CONNECTOR_ENABLED_DEFAULT, inline=LBL_CONNECTOR3, group=GRP_SIGNAL_INPUTS)
i_connector3 = input.source(title=LBL_CONNECTOR_SOURCE, defval=close, inline=LBL_CONNECTOR3, group=GRP_SIGNAL_INPUTS, tooltip=TIP_SIGNAL_INPUTS)

// â€”â€”â€”â€”â€” Inputs: Visualisation settings
i_plotBrightness = input.int(title=LBL_VISUALS_BRIGHTNESS, defval=VISUALS_BRIGHTNESS_DEFAULT, minval=VISUALS_BRIGHTNESS_MIN, maxval=VISUALS_BRIGHTNESS_MAX, step=VISUALS_BRIGHTNESS_STEP, inline=LBL_VISUALS_BRIGHTNESS, group=GRP_VISUALS) / 100
i_plotColorES = input.color(title=LBL_VISUALS_COLOR_ES, defval=VISUALS_COLOR_ES_DEFAULT, inline=LBL_VISUALS_BRIGHTNESS, group=GRP_VISUALS)
i_plotColorXS = input.color(title=LBL_VISUALS_COLOR_XS, defval=VISUALS_COLOR_XS_DEFAULT, inline=LBL_VISUALS_BRIGHTNESS, group=GRP_VISUALS, tooltip=TIP_VISUALS_SHORT)

i_plotMode = input.string(title=LBL_VISUALS_MODE, defval=VISUALS_MODE_DEFAULT, options=[PLOTSIGNALS], inline=LBL_VISUALS_MODE, group=GRP_VISUALS)
i_plotColorEL = input.color(title=LBL_VISUALS_COLOR_EL, defval=VISUALS_COLOR_EL_DEFAULT, inline=LBL_VISUALS_MODE, group=GRP_VISUALS)
i_plotColorXL = input.color(title=LBL_VISUALS_COLOR_XL, defval=VISUALS_COLOR_XL_DEFAULT, inline=LBL_VISUALS_MODE, group=GRP_VISUALS, tooltip=TIP_VISUALS_LONG)

// === FUNCTIONS ===

// â€”â€”â€”â€”â€” Function: Extract signal weights from specific connector
extractSignalWeights(_connectorEnabled, _connector) => 
    if (_connectorEnabled)
        [ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS] = azconnector.extract(_connector)
    else
        [0.0, 0.0, 0.0, 0.0]

// â€”â€”â€”â€”â€” Function: Apply brightness settings on color
applyBrightness(_color, _bright) =>
    color _r = color.new(_color, 100 - 100 * _bright)

// === CALCULATIONS ===

// â€”â€”â€”â€”â€” Calculations: Extract passthrough EL, XL, ES and XS signal values from each connector
[ptSignalEL1, ptSignalXL1, ptSignalES1, ptSignalXS1] = extractSignalWeights(i_connector1Enabled, i_connector1)
[ptSignalEL2, ptSignalXL2, ptSignalES2, ptSignalXS2] = extractSignalWeights(i_connector2Enabled, i_connector2)
[ptSignalEL3, ptSignalXL3, ptSignalES3, ptSignalXS3] = extractSignalWeights(i_connector3Enabled, i_connector3)

ptSignalEL = ptSignalEL1 + ptSignalEL2 + ptSignalEL3
ptSignalXL = ptSignalXL1 + ptSignalXL2 + ptSignalXL3
ptSignalES = ptSignalES1 + ptSignalES2 + ptSignalES3
ptSignalXS = ptSignalXS1 + ptSignalXS2 + ptSignalXS3

// â€”â€”â€”â€”â€” Calculations: Convert signal weights to Connector output stream
connectorOut = azconnector.compose(ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS)

// === VISUALS ===

// â€”â€”â€”â€”â€” Visuals: Plot zeroline needed for reference to plot fills 
zeroPlotId = plot(0, "Zero", color.new(color.silver, 100), 0, plot.style_circles)

// â€”â€”â€”â€”â€” Visuals: Plot Incoming Signals
signalELPlotId = plot(i_plotMode == PLOTSIGNALS ? ptSignalEL : na, style=plot.style_line, linewidth=1, color=applyBrightness(i_plotColorEL, i_plotBrightness), title="EL")
signalXLPlotId = plot(i_plotMode == PLOTSIGNALS ? ptSignalXL : na, style=plot.style_line, linewidth=1, color=applyBrightness(i_plotColorXL, i_plotBrightness), title="XL")
signalESPlotId = plot(i_plotMode == PLOTSIGNALS ? ptSignalES : na, style=plot.style_line, linewidth=1, color=applyBrightness(i_plotColorES, i_plotBrightness), title="ES")
signalXSPlotId = plot(i_plotMode == PLOTSIGNALS ? ptSignalXS : na, style=plot.style_line, linewidth=1, color=applyBrightness(i_plotColorXS, i_plotBrightness), title="XS")

fill(signalELPlotId, zeroPlotId, color=applyBrightness(i_plotColorEL, i_plotBrightness/8))
fill(signalXLPlotId, zeroPlotId, color=applyBrightness(i_plotColorXL, i_plotBrightness/8))
fill(signalESPlotId, zeroPlotId, color=applyBrightness(i_plotColorES, i_plotBrightness/8))
fill(signalXSPlotId, zeroPlotId, color=applyBrightness(i_plotColorXS, i_plotBrightness/8))

// â€”â€”â€”â€”â€” Visuals: Plot Connector Output
plot(connectorOut, title="Signal Connector", display=display.none, color=color.new(color.blue, 100))

// === ALERTS ===

//alertcondition