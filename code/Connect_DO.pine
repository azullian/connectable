// ===LICENSE ===

// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// ¬© Azullian

// === VERSION ===

//@version=5

// === DECLARATIONS ===

indicator('Donchian channels / Connectable [Azullian]', shorttitle='Donchian channels / Connectable [Azullian]', overlay=true)

// === IMPORTS ===

import azullian/azLibConnector/2 as azconnector

// === CONSTANTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Timeframe options
var TF00                        ="default"
var TF01                        ="1S"
var TF02                        ="5S"
var TF03                        ="15S"
var TF04                        ="30S"
var TF05                        ="1"
var TF06                        ="3"
var TF07                        ="5"
var TF08                        ="15"
var TF09                        ="30"
var TF10                        ="45"
var TF11                        ="60"
var TF12                        ="120"
var TF13                        ="180"
var TF14                        ="240"
var TF15                        ="1D"
var TF16                        ="5D"
var TF17                        ="1W"
var TF18                        ="1M"
var TF19                        ="3M"
var TF20                        ="12M"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Mode options
var ALL                         = 'All'
var ENTRIES_EXITS               = 'Entries & Exits'
var ENTRIES                     = 'Entries Only'
var EXITS                       = 'Exits Only'
var ZONE                        = 'Zone'

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Count options
var EVERY                       = "Every"
var SINGLE                      = "Single"
var THS                         = "Single+Threshold"
var THE                         = "Every+Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Category Threshold options
var THRESHOLD                   = "Threshold"
var NO_THRESHOLD                = "No Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Connector Flow options
var BOTH                        = "Both"
var INDICATOR                   = "Indicator Only"
var CONNECTOR                   = "Connector Only"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips - Global settings
var LBL_INDICATOR_ENERGY        = "üó≤Ô∏è"
var LBL_INDICATOR_BRIGHTNESS    = "‚òº"
var TIP_ENERGY_BRIGHTNESS       = "Energy % / Brightness %"

var LBL_CONNECTOR               = "‚Üí"
var LBL_CONNECTOR_MODE          = "‚å•"
var LBL_THRESHOLD_TYPE          = "·ÉÑ"
var TIP_INPUT_FLOW_THRESH       = "Input / Flow / Threshold type"

var LBL_SIGNALS_MULTI           = "‚•Ö"
var LBL_SIGNALS_THRESH          = "‚•á"
var LBL_SIGNALS_LIMIT           = "‚•±"
var TIP_MULTI_THRESH_LIMIT      = "Signals Multiplier / Threshold / Limiter"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips -  Weight system
var LBL_SIGNAL_MODE             = 'SM'
var LBL_SIGNAL_PERIOD           = 'SP'
var LBL_SIGNAL_COUNT            = 'SC'
var TIP_SIGNAL_MODE             = 'SM: Signal Mode / SP: Signal Period. # of historical bars to lookup the condition. / SC: Signal Count. Define how to count signals within Signal Period. Single: Count a single condition in period. Every: Count every condition in period. Threshold: Count a single condition if number of conditions in period equal or exceed threshold.'

var LBL_EL                      = "EL"
var LBL_XL                      = "XL"
var LBL_ES                      = "ES"
var LBL_XS                      = "XS"

var LBL_LONG_COLOR              = "ü°ë"
var LBL_SHORT_COLOR             = "ü°ì"
var LBL_NEUTRAL_COLOR           = "‚Üï"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips -  Indicator
var LBL_ENABLE                  = 'Enable Indicator'
var TIP_DO                     = 'DO: Relative Strength Index (DO): Measures recent trading strength, velocity of change in the trend, and magnitude of the move.'

var LBL_SYMBOL                  = 'S'
var LBL_TIMEFRAME               = 'T'
var TIP_SYMBOL_TIMEFRAME        = "S: Symbol / T: Timeframe"

var LBL_LENGTH                  = 'LE'
var TIP_LENGTH                  = 'LE: Length'

var LBL_SHOW_DONCHIAN           = 'Show Donchian Channels'
var LBL_UPPER                   = 'U'
var LBL_BASIS                   = 'B'
var LBL_LOWER                   = 'L'
var LBL_BACKGROUND              = 'BG'

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Global settings
var ENERGY_DEFAULT              = 10
var ENERGY_MIN                  = 0
var ENERGY_MAX                  = 100
var ENERGY_STEP                 = 10
var BRIGHTNESS_DEFAULT          = 85
var BRIGHTNESS_MIN              = 0
var BRIGHTNESS_MAX              = 100 
var BRIGHTNESS_STEP             = 5
var MULTIPLIER_DEFAULT          = 1
var THRESHOLD_DEFAULT           = 12
var THRESHOLD_MIN               = 0
var THRESHOLD_MAX               = 499
var LIMITER_DEFAULT             = 499
var LIMITER_MIN                 = 0
var LIMITER_MAX                 = 499
var CONNECTOR_MODE_DEFAULT      = INDICATOR
var SIGNALS_THRES_TYPE_DEFAULT  = NO_THRESHOLD

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Indicator settings
var ENABLE_DEFAULT              = true
var SYMBOL_DEFAULT              = 'CRYPTOCAP:TOTAL'
var TIMEFRAME_DEFAULT           = timeframe.period

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Signal weight settings
var SIGNAL_MIN                  = -12
var SIGNAL_MAX                  = 12

var SIGNAL_PERIODS_DEFAULT      = 0
var SIGNAL_MODE_DEFAULT         = ENTRIES
var SIGNAL_COUNT_DEFAULT        = SINGLE

var EL_DEFAULT                  = 6
var XL_DEFAULT                  = 6
var ES_DEFAULT                  = 6
var XS_DEFAULT                  = 6

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Colors
var LONG_COLOR                  = color.rgb(149, 117, 205)
var SHORT_COLOR                 = color.rgb(149, 117, 205)
var DO_COLOR                    = color.rgb(149, 117, 205)
var BASIS_COLOR                 = #e91e63
var UPPER_COLOR                 = #9575cd
var LOWER_COLOR                 = #9575cd
var BG_COLOR                    = color.rgb(149, 117, 205, 95)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Icons
var CAT_ICON                    = shape.cross
var DO_ICON                     = CAT_ICON


// === INPUTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Visualisation settings
var settingsGroup = "SETTINGS"
i_indicatorEnergy = input.int(title=LBL_INDICATOR_ENERGY, defval=ENERGY_DEFAULT, minval=ENERGY_MIN, maxval=ENERGY_MAX, step=ENERGY_STEP, inline=LBL_INDICATOR_ENERGY, group=settingsGroup) / 100
i_indicatorBrightness = input.int(title=LBL_INDICATOR_BRIGHTNESS, defval=BRIGHTNESS_DEFAULT, minval=BRIGHTNESS_MIN, maxval=BRIGHTNESS_MAX, step=BRIGHTNESS_STEP, inline=LBL_INDICATOR_ENERGY, group=settingsGroup, tooltip=TIP_ENERGY_BRIGHTNESS) / 100

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Connector Settings
i_connector = input.source(title=LBL_CONNECTOR, defval=close, inline=LBL_CONNECTOR, group=settingsGroup)
i_connectorMode = input.string(title=LBL_CONNECTOR_MODE, defval=CONNECTOR_MODE_DEFAULT, options=[BOTH, INDICATOR, CONNECTOR], inline=LBL_CONNECTOR, group=settingsGroup)
i_signalsThresholdType = input.string(title=LBL_THRESHOLD_TYPE, defval=SIGNALS_THRES_TYPE_DEFAULT, options=[NO_THRESHOLD, THRESHOLD], inline=LBL_CONNECTOR, group=settingsGroup, tooltip=TIP_INPUT_FLOW_THRESH)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Category Settings
i_signalsMultiplier = input.int(title=LBL_SIGNALS_MULTI, defval=MULTIPLIER_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup)
i_signalsThreshold = input.int(title=LBL_SIGNALS_THRESH, defval=THRESHOLD_DEFAULT, minval=THRESHOLD_MIN, maxval=THRESHOLD_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup)
i_signalsLimiter = input.int(title=LBL_SIGNALS_LIMIT, defval=LIMITER_DEFAULT, minval=LIMITER_MIN, maxval=LIMITER_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup, tooltip=TIP_MULTI_THRESH_LIMIT)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Indicator inputs
var doGroupNameSettings = 'DO - Donchian channels'
i_doEnabled = input.bool(title=LBL_ENABLE, defval=ENABLE_DEFAULT, group=doGroupNameSettings, tooltip=TIP_DO)

i_doSymEnabled = input.bool(title=LBL_SYMBOL, defval=false, group=doGroupNameSettings, inline=LBL_SYMBOL)
i_doSymbol = input.symbol(SYMBOL_DEFAULT, title='', inline=LBL_SYMBOL, group=doGroupNameSettings)
i_doTimeFrameTmp = input.timeframe(defval=TF00, title=LBL_TIMEFRAME, options=[TF00,TF01,TF02,TF03,TF04,TF05,TF06,TF07,TF08,TF09,TF10,TF11,TF12,TF13,TF14,TF15,TF16,TF17,TF18,TF19,TF20], tooltip=TIP_SYMBOL_TIMEFRAME, inline=LBL_SYMBOL, group=doGroupNameSettings) 
i_doTimeFrame = i_doTimeFrameTmp == TF00 ? TIMEFRAME_DEFAULT : i_doTimeFrameTmp

i_dosrc = close
i_dolength = input.int(title=LBL_LENGTH, defval=20, minval=1, inline=LBL_LENGTH, group=doGroupNameSettings, tooltip=TIP_LENGTH)

i_doplot = input.bool(true, title=LBL_SHOW_DONCHIAN)
i_doplotU = input.color(UPPER_COLOR, "U", inline=LBL_SHOW_DONCHIAN)
i_doplotB = input.color(BASIS_COLOR, "B", inline=LBL_SHOW_DONCHIAN)
i_doplotL = input.color(LOWER_COLOR, "L", inline=LBL_SHOW_DONCHIAN)
i_doplotBG = input.color(BG_COLOR, "BG", tooltip="U: Upper, B: Basis, L: Lower, BG: Background", inline=LBL_SHOW_DONCHIAN)

var doGroupNameWeight = 'SIGNAL WEIGHTS AND CONDITIONS'
i_doSignalMode = input.string(title=LBL_SIGNAL_MODE, defval=ENTRIES, options=[ALL, ENTRIES_EXITS, ENTRIES, EXITS, ZONE], group=doGroupNameWeight, tooltip=TIP_SIGNAL_MODE, inline=LBL_SIGNAL_MODE)
i_doSignalPeriod = input.int(title=LBL_SIGNAL_PERIOD, defval=SIGNAL_PERIODS_DEFAULT, inline=LBL_SIGNAL_MODE, group=doGroupNameWeight)
i_doSignalCount = input.string(title=LBL_SIGNAL_COUNT, defval=SINGLE, options=[SINGLE, EVERY, THS, THE], inline=LBL_SIGNAL_MODE, group=doGroupNameWeight, tooltip=TIP_SIGNAL_MODE)

i_doES = input.int(title=LBL_ES, defval=ES_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_ES, group=doGroupNameWeight)
i_doXL =  input.int(title=LBL_XL, defval=XL_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_ES, group=doGroupNameWeight)
i_doSHORT_COLOR = input.color(title=LBL_SHORT_COLOR, defval=DO_COLOR, inline=LBL_ES, group=doGroupNameWeight)

i_doEL = input.int(title=LBL_EL, defval=EL_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_EL, group=doGroupNameWeight)
i_doXS = input.int(title=LBL_XS, defval=XS_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_EL, group=doGroupNameWeight)
i_doLONG_COLOR = input.color(title=LBL_LONG_COLOR, defval=DO_COLOR, inline=LBL_EL, group=doGroupNameWeight)


// === FUNCTIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition zone mode
isZone(_sm) => _sm == ALL or _sm == ZONE

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition start mode
isEntries(_sm) => _sm == ALL or _sm == ENTRIES

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition end mode
isExits(_sm) => _sm == ALL or _sm == EXITS

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition start mode
isEntriesAndExits(_sm) => _sm == ENTRIES_EXITS

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get the weight based on the L, XL, S, XS conditions and add or not the condition weight x bars back (0 = current)   
getWeight(_series, _weight, _signalPeriod, _signalCount) =>
    seriesWeight = 0
    for i = 0 to _signalPeriod by 1
        if _series[i] == true
            seriesWeight += _weight
            if _signalCount == SINGLE
                break
    if (_signalCount == THS or _signalCount == THE)
        seriesWeight := (seriesWeight == (_weight * _signalPeriod)) ? _signalCount == THS ? _weight : seriesWeight : 0
    seriesWeight

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Multiply the value with given multiplier
applyMultiplier(_s, _m) => _s * _m

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Threshold the value with given threshold type and value
applyThreshold(_s, _t, _th) => _t == NO_THRESHOLD or _s >= _th ? _s : 0

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Limit the value with given limiter value
applyLimiter(_s, _l) => _s > _l ? _l : _s

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get series where (up or under the candle) to draw the shape based on energy settings
getPlotSeries(_long, _weightLong, _short, _weightShort, _nrg) =>
    plotSeries = _long ? low - ta.tr * math.abs(_weightLong) * _nrg : _short ? high + ta.tr * math.abs(_weightShort) * _nrg : na
    plotSeries

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get color based on brightness settings  
getPlotColor(_long, _weightLong, _colorLong, _short, _weightShort, _colorShort, _bright) =>
    plotColor = _long ? color.new(_colorLong, 100 - math.abs(_weightLong) / SIGNAL_MAX * 100 * _bright) : _short ? color.new(_colorShort, 100 - math.abs(_weightShort) / SIGNAL_MAX * 100 * _bright) : na
    plotColor

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Calculate DO
doCalculate(_dosrc, _dolength, _doSignalMode) =>
    lower = ta.lowest(_dolength)
    upper = ta.highest(_dolength)
    basis = math.avg(upper, lower)

    isdoOversoldCalc = low == lower
    isdoOversoldZone = isdoOversoldCalc and isZone(_doSignalMode)
    isdoOversoldEntry = isdoOversoldCalc and isdoOversoldCalc[1] == false and (isEntries(_doSignalMode) or isEntriesAndExits(_doSignalMode))
    isdoOversoldExit = isdoOversoldCalc == false and isdoOversoldCalc[1] and (isExits(_doSignalMode) or isEntriesAndExits(_doSignalMode))

    isdoOverboughtCalc = high == upper
    isdoOverboughtZone = isdoOverboughtCalc and isZone(_doSignalMode)
    isdoOverboughtEntry = isdoOverboughtCalc and isdoOverboughtCalc[1] == false and (isEntries(_doSignalMode) or isEntriesAndExits(_doSignalMode))
    isdoOverboughtExit = isdoOverboughtCalc == false and isdoOverboughtCalc[1] and (isExits(_doSignalMode) or isEntriesAndExits(_doSignalMode))

    doLongCalc = isdoOversoldZone or isdoOversoldEntry or isdoOversoldExit
    doShortCalc = isdoOverboughtZone or isdoOverboughtEntry or isdoOverboughtExit
    [doLongCalc, doShortCalc]

bool doLong = false
bool doShort = false

[_doLong, _doShort] =  request.security(i_doSymEnabled ? i_doSymbol : syminfo.tickerid, i_doTimeFrame, doCalculate(i_dosrc, i_dolength, i_doSignalMode))

if i_doEnabled
    doLong := _doLong
    doShort := _doShort

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Calculate DO components
basisDOCalculate(_dosrc, _dolength) =>
    math.avg(ta.highest(_dolength), ta.lowest(_dolength))
    
upperDOCalculate(_dolength) =>
    ta.highest(_dolength)

lowerDOCalculate(_dolength) =>
    ta.lowest(_dolength)

// Fetching results for each function
basisDOValue = request.security(i_doSymEnabled ? i_doSymbol : syminfo.tickerid, i_doTimeFrame, basisDOCalculate(i_dosrc, i_dolength))
upperDOValue = request.security(i_doSymEnabled ? i_doSymbol : syminfo.tickerid, i_doTimeFrame, upperDOCalculate(i_dolength))
lowerDOValue = request.security(i_doSymEnabled ? i_doSymbol : syminfo.tickerid, i_doTimeFrame, lowerDOCalculate(i_dolength))


// === CALCULATIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Calculate L, XL, S and XS weight values based on trading conditions, input weight settings, how many x bars back and wheter to include the weight for each occurrence or a single occurence.   
signalEL = getWeight(doLong, i_doEL, i_doSignalPeriod, i_doSignalCount)
signalXL = getWeight(doShort, i_doXL, i_doSignalPeriod, i_doSignalCount)
signalES = getWeight(doShort, i_doES, i_doSignalPeriod, i_doSignalCount)
signalXS = getWeight(doLong, i_doXS, i_doSignalPeriod, i_doSignalCount) 

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Multiplier
signalEL := applyMultiplier(signalEL, i_signalsMultiplier)
signalXL := applyMultiplier(signalXL, i_signalsMultiplier)
signalES := applyMultiplier(signalES, i_signalsMultiplier)
signalXS := applyMultiplier(signalXS, i_signalsMultiplier)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Threshold
signalEL := applyThreshold(signalEL, i_signalsThresholdType, i_signalsThreshold)
signalXL := applyThreshold(signalXL, i_signalsThresholdType, i_signalsThreshold)
signalES := applyThreshold(signalES, i_signalsThresholdType, i_signalsThreshold)
signalXS := applyThreshold(signalXS, i_signalsThresholdType, i_signalsThreshold)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Limiter
signalEL := applyLimiter(signalEL, i_signalsLimiter)
signalXL := applyLimiter(signalXL, i_signalsLimiter)
signalES := applyLimiter(signalES, i_signalsLimiter)
signalXS := applyLimiter(signalXS, i_signalsLimiter)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Extract passthrough EL, XL, ES and XS signal values from connector
[ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS] = azconnector.extract(i_connector)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Combine output L, XL, S and XS weight values to single number based on input settings
connectorOut = switch i_connectorMode
    BOTH => azconnector.compose(signalEL + ptSignalEL, signalXL + ptSignalXL, signalES + ptSignalES, signalXS + ptSignalXS)
    INDICATOR => azconnector.compose(signalEL, signalXL, signalES, signalXS)
    CONNECTOR => azconnector.compose(ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS)


// == VISUALS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Category Symbol
var indicatorSymbol = CAT_ICON
indicatorPlotSeries = getPlotSeries(signalEL >= i_signalsThreshold, signalEL, signalES >= i_signalsThreshold, signalES, i_indicatorEnergy)
indicatorPlotColor = getPlotColor(signalEL >= i_signalsThreshold, signalEL, LONG_COLOR, signalES >= i_signalsThreshold, signalES, SHORT_COLOR, i_indicatorBrightness)
plotshape(series=indicatorPlotSeries, style=indicatorSymbol, title='Settings Indicator', location=location.absolute, color=indicatorPlotColor, size=size.small)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Indicator Symbol
doPlotSeries = i_doEnabled ? getPlotSeries(doLong, i_doEL == 0 ? i_doXS : i_doEL, doShort, i_doES == 0 ? i_doXL : i_doES, i_indicatorEnergy) : na
doPlotColor = i_doEnabled ? getPlotColor(doLong,  i_doEL == 0 ? i_doXS : i_doEL, i_doLONG_COLOR, doShort,  i_doES == 0 ? i_doXL : i_doES, i_doSHORT_COLOR, i_indicatorBrightness) : na
plotshape(series=doPlotSeries, title=doGroupNameSettings, style=DO_ICON, location=location.absolute, color=doPlotColor, size=size.tiny)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Donchian channels
plot(i_doplot ? basisDOValue : na, "Basis", color=i_doplotB)
p1 = plot(i_doplot ? upperDOValue : na, "Upper", color=i_doplotU)
p2 = plot(i_doplot ? lowerDOValue : na, "Lower", color=i_doplotL)
fill(p1, p2, title = "Background", color=i_doplotBG)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Strategy Connector
plot(connectorOut, title='Signal connector', display=display.none)