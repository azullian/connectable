// === LICENSE ===

// PROPRIETARY LICENSE AGREEMENT
// All rights reserved.

// DISCLAIMER:
// This script is provided "as-is" without any warranties of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement.
// Azullian will not be liable for any damages or losses arising out of the use or inability to use this script.

// ¬© azullian

// === VERSION ===

//@version=5

// === DECLARATIONS ===

indicator('MACD / Connectable [Azullian]', shorttitle='MACD / Connectable [Azullian]', overlay=true)


// === IMPORTS ===

import azullian/azLibConnector/1 as azconnector


// === CONSTANTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Timeframe options
var TF00                        ="default"
var TF01                        ="1S"
var TF02                        ="5S"
var TF03                        ="15S"
var TF04                        ="30S"
var TF05                        ="1"
var TF06                        ="3"
var TF07                        ="5"
var TF08                        ="15"
var TF09                        ="30"
var TF10                        ="45"
var TF11                        ="60"
var TF12                        ="120"
var TF13                        ="180"
var TF14                        ="240"
var TF15                        ="1D"
var TF16                        ="5D"
var TF17                        ="1W"
var TF18                        ="1M"
var TF19                        ="3M"
var TF20                        ="12M"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Mode options
var ALL                         = 'All'
var ENTRIES_EXITS               = 'Entries & Exits'
var ENTRIES                     = 'Entries Only'
var EXITS                       = 'Exits Only'
var ZONE                        = 'Zone'

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Count options
var EVERY                       = "Every"
var SINGLE                      = "Single"
var THS                         = "Single+Threshold"
var THE                         = "Every+Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Category Threshold options
var THRESHOLD                   = "Threshold"
var NO_THRESHOLD                = "No Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Connector Flow options
var BOTH                        = "Both"
var INDICATOR                   = "Indicator Only"
var CONNECTOR                   = "Connector Only"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Crossings options

var CROSS_ALL                   = "ALL"
var CROSS_ABOVE_BELOW           = "Above/Below 0"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips - Global settings
var LBL_INDICATOR_ENERGY        = "üó≤Ô∏è"
var LBL_INDICATOR_BRIGHTNESS    = "‚òº"
var TIP_ENERGY_BRIGHTNESS       = "Energy % / Brightness %"

var LBL_CONNECTOR               = "‚Üí"
var LBL_CONNECTOR_MODE          = "‚å•"
var LBL_THRESHOLD_TYPE          = "·ÉÑ"
var TIP_INPUT_FLOW_THRESH       = "Input / Flow / Threshold type"

var LBL_SIGNALS_MULTI           = "‚•Ö"
var LBL_SIGNALS_THRESH          = "‚•á"
var LBL_SIGNALS_LIMIT           = "‚•±"
var TIP_MULTI_THRESH_LIMIT      = "Signals Multiplier / Threshold / Limiter"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips -  Weight system
var LBL_SIGNAL_MODE             = 'SM'
var LBL_SIGNAL_PERIOD           = 'SP'
var LBL_SIGNAL_COUNT            = 'SC'
var TIP_SIGNAL_MODE             = 'SM: Signal Mode / SP: Signal Period. # of historical bars to lookup the condition. / SC: Signal Count. Define how to count signals within Signal Period. Single: Count a single condition in period. Every: Count every condition in period. Threshold: Count a single condition if number of conditions in period equal or exceed threshold.'

var LBL_EL                      = "EL"
var LBL_XL                      = "XL"
var LBL_ES                      = "ES"
var LBL_XS                      = "XS"

var LBL_LONG_COLOR              = "ü°ë"
var LBL_SHORT_COLOR             = "ü°ì"
var LBL_NEUTRAL_COLOR           = "‚Üï"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips -  Indicator
var LBL_ENABLE                  = 'Enable Indicator'
var TIP_MACD                     = 'MACD: Moving average convergence divergence (MACD) is a trend-following momentum indicator that shows the relationship between two moving averages of a security‚Äôs price. The MACD is calculated by subtracting the 26-period exponential moving average (EMA) from the 12-period EMA.The result of that calculation is the MACD line. A nine-day EMA of the MACD called the signal line, is then plotted on top of the MACD line, which can function as a trigger for buy and sell signals. Traders may buy the security when the MACD crosses above its signal line and sell‚Äîor short‚Äîthe security when the MACD crosses below the signal line. Moving average convergence divergence (MACD) indicators can be interpreted in several ways, but the more common methods are crossovers, divergences, and rapid rises/falls.'

var LBL_SYMBOL                  = 'S'
var LBL_TIMEFRAME               = 'T'
var TIP_SYMBOL_TIMEFRAME        = "S: Symbol / T: Timeframe"

var LBL_LENGTH_FAST             = "FL"
var LBL_LENGTH_SLOW             = "SL"
var LBL_SMOOTHING               = "SM"
var LBL_CROSSING                = "C"
var TIP_CROSSING                = "C: Crossing, bearish crossings above 0, bullish crossings below zero"
var TIP_MACD_LengthS            = "FL: Fast length, SL: Slow length, SM: Smoothing"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Global settings
var ENERGY_DEFAULT              = 10
var ENERGY_MIN                  = 0
var ENERGY_MAX                  = 100
var ENERGY_STEP                 = 10
var BRIGHTNESS_DEFAULT          = 85
var BRIGHTNESS_MIN              = 0
var BRIGHTNESS_MAX              = 100 
var BRIGHTNESS_STEP             = 5
var MULTIPLIER_DEFAULT          = 1
var THRESHOLD_DEFAULT           = 12
var THRESHOLD_MIN               = 0
var THRESHOLD_MAX               = 499
var LIMITER_DEFAULT             = 499
var LIMITER_MIN                 = 0
var LIMITER_MAX                 = 499
var CONNECTOR_MODE_DEFAULT      = INDICATOR
var SIGNALS_THRES_TYPE_DEFAULT  = NO_THRESHOLD

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Indicator settings
var ENABLE_DEFAULT              = true
var SYMBOL_DEFAULT              = 'CRYPTOCAP:TOTAL'
var TIMEFRAME_DEFAULT           = timeframe.period

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Signal weight settings
var SIGNAL_MIN                  = -12
var SIGNAL_MAX                  = 12

var SIGNAL_PERIODS_DEFAULT      = 0
var SIGNAL_MODE_DEFAULT         = ENTRIES
var SIGNAL_COUNT_DEFAULT        = SINGLE

var EL_DEFAULT                  = 6
var XL_DEFAULT                  = 6
var ES_DEFAULT                  = 6
var XS_DEFAULT                  = 6

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Colors
var LONG_COLOR                  = color.rgb(33, 150, 243, 95)
var SHORT_COLOR                 = color.rgb(33, 150, 243, 95)
var MACD_COLOR                  = color.rgb(33, 150, 243, 95)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Icons
var CAT_ICON                    = shape.diamond
var MACD_ICON                   = CAT_ICON


// === INPUTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Visualisation settings
var settingsGroup = "SETTINGS"
i_indicatorEnergy = input.int(title=LBL_INDICATOR_ENERGY, defval=ENERGY_DEFAULT, minval=ENERGY_MIN, maxval=ENERGY_MAX, step=ENERGY_STEP, inline=LBL_INDICATOR_ENERGY, group=settingsGroup) / 100
i_indicatorBrightness = input.int(title=LBL_INDICATOR_BRIGHTNESS, defval=BRIGHTNESS_DEFAULT, minval=BRIGHTNESS_MIN, maxval=BRIGHTNESS_MAX, step=BRIGHTNESS_STEP, inline=LBL_INDICATOR_ENERGY, group=settingsGroup, tooltip=TIP_ENERGY_BRIGHTNESS) / 100

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Connector Settings
i_connector = input.source(title=LBL_CONNECTOR, defval=close, inline=LBL_CONNECTOR, group=settingsGroup)
i_connectorMode = input.string(title=LBL_CONNECTOR_MODE, defval=CONNECTOR_MODE_DEFAULT, options=[BOTH, INDICATOR, CONNECTOR], inline=LBL_CONNECTOR, group=settingsGroup)
i_signalsThresholdType = input.string(title=LBL_THRESHOLD_TYPE, defval=SIGNALS_THRES_TYPE_DEFAULT, options=[NO_THRESHOLD, THRESHOLD], inline=LBL_CONNECTOR, group=settingsGroup, tooltip=TIP_INPUT_FLOW_THRESH)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Category Settings
i_signalsMultiplier = input.int(title=LBL_SIGNALS_MULTI, defval=MULTIPLIER_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup)
i_signalsThreshold = input.int(title=LBL_SIGNALS_THRESH, defval=THRESHOLD_DEFAULT, minval=THRESHOLD_MIN, maxval=THRESHOLD_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup)
i_signalsLimiter = input.int(title=LBL_SIGNALS_LIMIT, defval=LIMITER_DEFAULT, minval=LIMITER_MIN, maxval=LIMITER_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup, tooltip=TIP_MULTI_THRESH_LIMIT)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Indicator inputs
var macdGroupNameSettings = 'MACD'
i_macdEnabled = input.bool(title=LBL_ENABLE, defval=ENABLE_DEFAULT, group=macdGroupNameSettings, tooltip=TIP_MACD)

i_macdSymEnabled = input.bool(title=LBL_SYMBOL, defval=false, group=macdGroupNameSettings, inline=LBL_SYMBOL)
i_macdSymbol = input.symbol(SYMBOL_DEFAULT, title='', inline=LBL_SYMBOL, group=macdGroupNameSettings)
i_macdTimeFrameTmp = input.timeframe(defval=TF00, title=LBL_TIMEFRAME, options=[TF00,TF01,TF02,TF03,TF04,TF05,TF06,TF07,TF08,TF09,TF10,TF11,TF12,TF13,TF14,TF15,TF16,TF17,TF18,TF19,TF20], tooltip=TIP_SYMBOL_TIMEFRAME, inline=LBL_SYMBOL, group=macdGroupNameSettings) 
i_macdTimeFrame = i_macdTimeFrameTmp == TF00 ? TIMEFRAME_DEFAULT : i_macdTimeFrameTmp

i_macdFastLength = input.int(title=LBL_LENGTH_FAST, defval=12, inline=LBL_LENGTH_FAST, group=macdGroupNameSettings)
i_macdSlowLength = input.int(title=LBL_LENGTH_SLOW, defval=26, inline=LBL_LENGTH_FAST, group=macdGroupNameSettings)
i_macdSmoothing = input.int(title=LBL_SMOOTHING, defval=9, inline=LBL_LENGTH_FAST, group=macdGroupNameSettings, tooltip=TIP_MACD_LengthS)

i_macdCrossingsEnabled = input.string(title=LBL_CROSSING, defval=CROSS_ABOVE_BELOW, options=[CROSS_ALL, CROSS_ABOVE_BELOW], group=macdGroupNameSettings, tooltip=TIP_CROSSING)


var macdGroupNameWeight = 'SIGNAL WEIGHTS AND CONDITIONS'
i_macdSignalMode = input.string(title=LBL_SIGNAL_MODE, defval=ENTRIES, options=[ALL, ENTRIES_EXITS, ENTRIES, EXITS, ZONE], group=macdGroupNameWeight, tooltip=TIP_SIGNAL_MODE, inline=LBL_SIGNAL_MODE)
i_macdSignalPeriod = input.int(title=LBL_SIGNAL_PERIOD, defval=SIGNAL_PERIODS_DEFAULT, inline=LBL_SIGNAL_MODE, group=macdGroupNameWeight)
i_macdSignalCount = input.string(title=LBL_SIGNAL_COUNT, defval=SINGLE, options=[SINGLE, EVERY, THS, THE], inline=LBL_SIGNAL_MODE, group=macdGroupNameWeight, tooltip=TIP_SIGNAL_MODE)

i_macdES = input.int(title=LBL_ES, defval=ES_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_ES, group=macdGroupNameWeight)
i_macdXL =  input.int(title=LBL_XL, defval=XL_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_ES, group=macdGroupNameWeight)
i_macdSHORT_COLOR = input.color(title=LBL_SHORT_COLOR, defval=MACD_COLOR, inline=LBL_ES, group=macdGroupNameWeight)

i_macdEL = input.int(title=LBL_EL, defval=EL_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_EL, group=macdGroupNameWeight)
i_macdXS = input.int(title=LBL_XS, defval=XS_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_EL, group=macdGroupNameWeight)
i_macdLONG_COLOR = input.color(title=LBL_LONG_COLOR, defval=MACD_COLOR, inline=LBL_EL, group=macdGroupNameWeight)


// === FUNCTIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition zone mode
isZone(_sm) => _sm == ALL or _sm == ZONE

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition start mode
isEntries(_sm) => _sm == ALL or _sm == ENTRIES

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition end mode
isExits(_sm) => _sm == ALL or _sm == EXITS

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition start mode
isEntriesAndExits(_sm) => _sm == ENTRIES_EXITS

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get the weight based on the L, XL, S, XS conditions and add or not the condition weight x bars back (0 = current)   
getWeight(_series, _weight, _signalPeriod, _signalCount) =>
    seriesWeight = 0
    for i = 0 to _signalPeriod by 1
        if _series[i] == true
            seriesWeight += _weight
            if _signalCount == SINGLE
                break
    if (_signalCount == THS or _signalCount == THE)
        seriesWeight := (seriesWeight == (_weight * _signalPeriod)) ? _signalCount == THS ? _weight : seriesWeight : 0
    seriesWeight

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Multiply the value with given multiplier
applyMultiplier(_s, _m) => _s * _m

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Threshold the value with given threshold type and value
applyThreshold(_s, _t, _th) => _t == NO_THRESHOLD or _s >= _th ? _s : 0

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Limit the value with given limiter value
applyLimiter(_s, _l) => _s > _l ? _l : _s

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get series where (up or under the candle) to draw the shape based on energy settings
getPlotSeries(_long, _weightLong, _short, _weightShort, _nrg) =>
    plotSeries = _long ? low - ta.tr * math.abs(_weightLong) * _nrg : _short ? high + ta.tr * math.abs(_weightShort) * _nrg : na
    plotSeries

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get color based on brightness settings  
getPlotColor(_long, _weightLong, _colorLong, _short, _weightShort, _colorShort, _bright) =>
    plotColor = _long ? color.new(_colorLong, 100 - math.abs(_weightLong) / SIGNAL_MAX * 100 * _bright) : _short ? color.new(_colorShort, 100 - math.abs(_weightShort) / SIGNAL_MAX * 100 * _bright) : na
    plotColor

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Calculate MACD
macdCalculate(_macdFastLength, _macdSlowLenhgt, _macdSmoothing, _macdCrossingsEnabled, _macdSignalMode) =>
    macd = ta.ema(close, _macdFastLength) - ta.ema(close, _macdSlowLenhgt)
    aMacd = ta.ema(macd, _macdSmoothing)
    macdDelta = macd - aMacd

    ismacdLongCalc = macd > aMacd and (_macdCrossingsEnabled == CROSS_ALL or _macdCrossingsEnabled == CROSS_ABOVE_BELOW and macd < 0)
    ismacdLongZone = ismacdLongCalc and isZone(_macdSignalMode)
    ismacdLongEntry = ismacdLongCalc[1] == false and ismacdLongCalc == true and (isEntries(_macdSignalMode) or isEntriesAndExits(_macdSignalMode))
    ismacdLongExit = ismacdLongCalc[1] == true and ismacdLongCalc == false and (isExits(_macdSignalMode) or isEntriesAndExits(_macdSignalMode))

    ismacdShortCalc = macd < aMacd and (_macdCrossingsEnabled == CROSS_ALL or _macdCrossingsEnabled == CROSS_ABOVE_BELOW and macd > 0)
    ismacdShortZone = ismacdShortCalc and isZone(_macdSignalMode)
    ismacdShortEntry = ismacdShortCalc[1] == false and ismacdShortCalc == true and (isEntries(_macdSignalMode) or isEntriesAndExits(_macdSignalMode))
    ismacdShortExit = ismacdShortCalc[1] == true and ismacdShortCalc == false and (isExits(_macdSignalMode) or isEntriesAndExits(_macdSignalMode))

    macdLongCalc = ismacdLongZone or ismacdLongEntry or ismacdLongExit
    macdShortCalc = ismacdShortZone or ismacdShortEntry or ismacdShortExit
    [macdLongCalc, macdShortCalc]

bool macdLong = false
bool macdShort = false

[_macdLong, _macdShort] = request.security(i_macdSymEnabled ? i_macdSymbol : syminfo.tickerid, i_macdTimeFrame, macdCalculate(i_macdFastLength, i_macdSlowLength, i_macdSmoothing, i_macdCrossingsEnabled, i_macdSignalMode))

if i_macdEnabled
    macdLong := _macdLong
    macdShort := _macdShort


// === CALCULATIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Calculate L, XL, S and XS weight values based on trading conditions, input weight settings, how many x bars back and wheter to include the weight for each occurrence or a single occurence.   
signalEL = getWeight(macdLong, i_macdEL, i_macdSignalPeriod, i_macdSignalCount)
signalXL = getWeight(macdShort, i_macdXL, i_macdSignalPeriod, i_macdSignalCount)
signalES = getWeight(macdShort, i_macdES, i_macdSignalPeriod, i_macdSignalCount)
signalXS = getWeight(macdLong, i_macdXS, i_macdSignalPeriod, i_macdSignalCount) 

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Multiplier
signalEL := applyMultiplier(signalEL, i_signalsMultiplier)
signalXL := applyMultiplier(signalXL, i_signalsMultiplier)
signalES := applyMultiplier(signalES, i_signalsMultiplier)
signalXS := applyMultiplier(signalXS, i_signalsMultiplier)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Threshold
signalEL := applyThreshold(signalEL, i_signalsThresholdType, i_signalsThreshold)
signalXL := applyThreshold(signalXL, i_signalsThresholdType, i_signalsThreshold)
signalES := applyThreshold(signalES, i_signalsThresholdType, i_signalsThreshold)
signalXS := applyThreshold(signalXS, i_signalsThresholdType, i_signalsThreshold)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Limiter
signalEL := applyLimiter(signalEL, i_signalsLimiter)
signalXL := applyLimiter(signalXL, i_signalsLimiter)
signalES := applyLimiter(signalES, i_signalsLimiter)
signalXS := applyLimiter(signalXS, i_signalsLimiter)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Extract passthrough EL, XL, ES and XS signal values from connector
[ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS] = azconnector.extract(i_connector)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Combine output L, XL, S and XS weight values to single number based on input settings
connectorOut = switch i_connectorMode
    BOTH => azconnector.compose(signalEL + ptSignalEL, signalXL + ptSignalXL, signalES + ptSignalES, signalXS + ptSignalXS)
    INDICATOR => azconnector.compose(signalEL, signalXL, signalES, signalXS)
    CONNECTOR => azconnector.compose(ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS)


// == VISUALS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Category Symbol
var indicatorSymbol = CAT_ICON
indicatorPlotSeries = getPlotSeries(signalEL >= i_signalsThreshold, signalEL, signalES >= i_signalsThreshold, signalES, i_indicatorEnergy)
indicatorPlotColor = getPlotColor(signalEL >= i_signalsThreshold, signalEL, LONG_COLOR, signalES >= i_signalsThreshold, signalES, SHORT_COLOR, i_indicatorBrightness)
plotshape(series=indicatorPlotSeries, style=indicatorSymbol, title='Settings Indicator', location=location.absolute, color=indicatorPlotColor, size=size.small)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Indicator Symbol
macdPlotSeries = i_macdEnabled ? getPlotSeries(macdLong, i_macdEL == 0 ? i_macdXS : i_macdEL, macdShort, i_macdES == 0 ? i_macdXL : i_macdES, i_indicatorEnergy) : na
macdPlotColor = i_macdEnabled ? getPlotColor(macdLong,  i_macdEL == 0 ? i_macdXS : i_macdEL, i_macdLONG_COLOR, macdShort,  i_macdES == 0 ? i_macdXL : i_macdES, i_macdSHORT_COLOR, i_indicatorBrightness) : na
plotshape(series=macdPlotSeries, title=macdGroupNameSettings, style=MACD_ICON, location=location.absolute, color=macdPlotColor, size=size.tiny)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Strategy Connector
plot(connectorOut, title='Signal connector', display=display.none)
