// ===LICENSE ===

// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// ¬© Azullian

// ===VERSION ===

//@version = 5

// ===DECLARATIONS ===

indicator("ADX / Connectable [Azullian]", shorttitle = "ADX / Connectable [Azullian]", overlay = true)

// ===IMPORTS ===

import azullian/azLibConnector/2 as azconnector

// ===CONSTANTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Timeframe options
var TF00                        = "default"
var TF01                        = "1S"
var TF02                        = "5S"
var TF03                        = "15S"
var TF04                        = "30S"
var TF05                        = "1"
var TF06                        = "3"
var TF07                        = "5"
var TF08                        = "15"
var TF09                        = "30"
var TF10                        = "45"
var TF11                        = "60"
var TF12                        = "120"
var TF13                        = "180"
var TF14                        = "240"
var TF15                        = "1D"
var TF16                        = "5D"
var TF17                        = "1W"
var TF18                        = "1M"
var TF19                        = "3M"
var TF20                        = "12M"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Candle type options
var CANDLE                      = "Candle"
var HEIKINASHI                  = "Heikin Ashi"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Mode options
var ALL                         = "All"
var ENTRIES_EXITS               = "Entries & Exits"
var ENTRIES                     = "Entries Only"
var EXITS                       = "Exits Only"
var ZONE                        = "Zone"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Count options
var EVERY                       = "Every"
var SINGLE                      = "Single"
var THS                         = "Single+Threshold"
var THE                         = "Every+Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Category Threshold options
var THRESHOLD                   = "Threshold"
var NO_THRESHOLD                = "No Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Connector Flow options
var BOTH                        = "Both"
var INDICATOR                   = "Indicator Only"
var CONNECTOR                   = "Connector Only"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Options - ADX Entry Modes
var EM_DI                       = "DI"
var EM_DI_ADX                   = "DI+ADX"
var EM_DI_ADX_INVERT            = "DI+ADX+Invert"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Options - ADX Exit Modes
var XM_DI                       = "DI"
var XM_ADX                      = "ADX"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips - Global settings
var GRP_SETTINGS                = "SETTINGS"
var LBL_INDICATOR_ENERGY        = "üó≤Ô∏è"
var LBL_INDICATOR_BRIGHTNESS    = "‚òº"
var TIP_ENERGY_BRIGHTNESS       = "Energy % / Brightness %"

var LBL_CONNECTOR               = "‚Üí"
var LBL_CONNECTOR_MODE          = "‚å•"
var LBL_THRESHOLD_TYPE          = "·ÉÑ"
var TIP_INPUT_FLOW_THRESH       = "Input / Flow / Threshold type"

var LBL_SIGNALS_MULTI           = "‚•Ö"
var LBL_SIGNALS_THRESH          = "‚•á"
var LBL_SIGNALS_LIMIT           = "‚•±"
var TIP_MULTI_THRESH_LIMIT      = "Signals Multiplier / Threshold / Limiter"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips - Indicator
var GRP_INDICATOR               = "ADX - AVERAGE DIRECTIONAL INDEX"
var LBL_ENABLE                  = "Enable Indicator"
var TIP_INDICATOR               = "ADX: Average directional index (ADX): Designed by Welles Wilder for commodity daily charts, the ADX is now used in several markets by technical traders to judge the strength of a trend. The trend has strength when ADX is above 25; the trend is weak or the price is trendless when ADX is below 20, according to Wilder."

var LBL_SYMBOL_ENABLED          = "S"
var LBL_SYMBOL                  = ""
var LBL_TIMEFRAME               = "T"
var LBL_CANDLETYPE              = "C"
var TIP_SYMBOL_TIMEFRAME        = "S: Symbol / T: Timeframe / C: Candle Type"

var LBL_LENGTH                  = "LE"
var LBL_SMOOTHING               = "SM"
var LBL_TREND_TH                = "TH"
var TIP_DI_SM_TH                = "LE: DI Length, SM: Smoothing, TH: Trend threshold"

var LBL_ENTRY_MODE              = "EM"
var LBL_EXIT_MODE               = "XM"
var TIP_ENTRY_EXIT_MODE         = "EM: ADX Entry Signal Mode. Use only DI+ and DI- crossings (DI). Use DI with increasing ADX (DI+ADX). Same as DI+ADX but also signal inverted DI with decreasing ADX (DI+ADX+Invert). / XM: ADX Exit Signal Mode. Use DI Crossing to exit (DI). Use Decreasing ADX to signal exit (ADX)."

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips - Weight system
var GRP_SIGNAL                  = "SIGNAL WEIGHTS AND CONDITIONS"
var LBL_SIGNAL_MODE             = "SM"
var LBL_SIGNAL_PERIOD           = "SP"
var LBL_SIGNAL_COUNT            = "SC"
var TIP_SIGNAL_MODE             = "SM: Signal Mode / SP: Signal Period. # of historical bars to lookup the condition. / SC: Signal Count. Define how to count signals within Signal Period. Single: Count a single condition in period. Every: Count every condition in period. Threshold: Count a single condition if number of conditions in period equal or exceed threshold."

var LBL_EL                      = "EL"
var LBL_XL                      = "XL"
var LBL_ES                      = "ES"
var LBL_XS                      = "XS"

var LBL_LONG_COLOR              = "ü°ë"
var LBL_SHORT_COLOR             = "ü°ì"
var LBL_NEUTRAL_COLOR           = "‚Üï"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Global settings
var ENERGY_DEFAULT              = 10
var ENERGY_MIN                  = 0
var ENERGY_MAX                  = 100
var ENERGY_STEP                 = 10
var BRIGHTNESS_DEFAULT          = 85
var BRIGHTNESS_MIN              = 0
var BRIGHTNESS_MAX              = 100 
var BRIGHTNESS_STEP             = 5
var MULTIPLIER_DEFAULT          = 1
var THRESHOLD_DEFAULT           = 12
var THRESHOLD_MIN               = 0
var THRESHOLD_MAX               = 499
var LIMITER_DEFAULT             = 499
var LIMITER_MIN                 = 0
var LIMITER_MAX                 = 499
var CONNECTOR_MODE_DEFAULT      = INDICATOR
var SIGNALS_THRES_TYPE_DEFAULT  = NO_THRESHOLD

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Indicator settings
var ENABLE_DEFAULT              = true

var SYMBOL_ENABLED_DEFAULT      = false
var SYMBOL_DEFAULT              = "BINANCE:BTCUSD"
var TIMEFRAME_DEFAULT           = timeframe.period
var CANDLETYPE_DEFAULT          = CANDLE

var LENGTH_DEFAULT              = 14
var LENGTH_MIN                  = 1
var LENGTH_MAX                  = 200
var LENGTH_STEP                 = 1

var SMOOTHING_DEFAULT           = 14
var SMOOTHING_MIN               = 1
var SMOOTHING_MAX               = 200
var SMOOTHING_STEP              = 1

var TREND_TH_DEFAULT            = 20
var TREND_TH_MIN                = 1
var TREND_TH_MAX                = 200
var TREND_TH_STEP               = 1

var ENTRY_MODE_DEFAULT          = EM_DI_ADX
var EXIT_MODE_DEFAULT           = XM_ADX

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Signal weight settings
var SIGNAL_MIN                  = -12
var SIGNAL_MAX                  = 12

var SIGNAL_PERIODS_DEFAULT      = 0
var SIGNAL_MODE_DEFAULT         = ENTRIES
var SIGNAL_COUNT_DEFAULT        = SINGLE

var EL_DEFAULT                  = 6
var XL_DEFAULT                  = 6
var ES_DEFAULT                  = 6
var XS_DEFAULT                  = 6

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Colors
var LONG_COLOR                  = color.rgb(100,169,149)
var SHORT_COLOR                 = color.rgb(145, 40, 81)
var ADX_COLOR                   = color.rgb(100,169,149)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Icons
var CAT_ICON                    = "‚ó©"
var ADX_ICON                    = CAT_ICON

// ===INPUTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Settings
i_indicatorEnergy = input.int(title = LBL_INDICATOR_ENERGY, defval = ENERGY_DEFAULT, minval = ENERGY_MIN, maxval = ENERGY_MAX, step = ENERGY_STEP, inline = LBL_INDICATOR_ENERGY, group = GRP_SETTINGS) / 100
i_indicatorBrightness = input.int(title = LBL_INDICATOR_BRIGHTNESS, defval = BRIGHTNESS_DEFAULT, minval = BRIGHTNESS_MIN, maxval = BRIGHTNESS_MAX, step = BRIGHTNESS_STEP, inline = LBL_INDICATOR_ENERGY, group = GRP_SETTINGS, tooltip = TIP_ENERGY_BRIGHTNESS) / 100

i_connector = input.source(title = LBL_CONNECTOR, defval = close, inline = LBL_CONNECTOR, group = GRP_SETTINGS)
i_connectorMode = input.string(title = LBL_CONNECTOR_MODE, defval = CONNECTOR_MODE_DEFAULT, options = [BOTH, INDICATOR, CONNECTOR], inline = LBL_CONNECTOR, group = GRP_SETTINGS)
i_signalsThresholdType = input.string(title = LBL_THRESHOLD_TYPE, defval = SIGNALS_THRES_TYPE_DEFAULT, options = [NO_THRESHOLD, THRESHOLD], inline = LBL_CONNECTOR, group = GRP_SETTINGS, tooltip = TIP_INPUT_FLOW_THRESH)

i_signalsMultiplier = input.int(title = LBL_SIGNALS_MULTI, defval = MULTIPLIER_DEFAULT, minval = SIGNAL_MIN, maxval = SIGNAL_MAX, inline = LBL_SIGNALS_MULTI, group = GRP_SETTINGS)
i_signalsThreshold = input.int(title = LBL_SIGNALS_THRESH, defval = THRESHOLD_DEFAULT, minval = THRESHOLD_MIN, maxval = THRESHOLD_MAX, inline = LBL_SIGNALS_MULTI, group = GRP_SETTINGS)
i_signalsLimiter = input.int(title = LBL_SIGNALS_LIMIT, defval = LIMITER_DEFAULT, minval = LIMITER_MIN, maxval = LIMITER_MAX, inline = LBL_SIGNALS_MULTI, group = GRP_SETTINGS, tooltip = TIP_MULTI_THRESH_LIMIT)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Indicator
i_adxEnabled = input.bool(title = LBL_ENABLE, defval = ENABLE_DEFAULT, group = GRP_INDICATOR, tooltip = TIP_INDICATOR)

i_adxSymEnabled = input.bool(title = LBL_SYMBOL_ENABLED, defval = SYMBOL_ENABLED_DEFAULT, inline = LBL_SYMBOL_ENABLED, group = GRP_INDICATOR)
i_adxSymbol = input.symbol(title = LBL_SYMBOL, defval = SYMBOL_DEFAULT, inline = LBL_SYMBOL_ENABLED, group = GRP_INDICATOR)
i_adxTimeFrameTmp = input.timeframe(title = LBL_TIMEFRAME, defval = TF00, options = [TF00, TF01, TF02, TF03, TF04, TF05, TF06, TF07, TF08, TF09, TF10, TF11, TF12, TF13, TF14, TF15, TF16, TF17, TF18, TF19, TF20], tooltip = TIP_SYMBOL_TIMEFRAME, inline = LBL_SYMBOL_ENABLED, group = GRP_INDICATOR) 
i_adxTimeFrame = i_adxTimeFrameTmp == TF00 ? TIMEFRAME_DEFAULT : i_adxTimeFrameTmp
i_adxCandleType = input.string(title = LBL_CANDLETYPE, defval = CANDLETYPE_DEFAULT, options = [CANDLE, HEIKINASHI], inline = LBL_SYMBOL_ENABLED, group = GRP_INDICATOR, tooltip = TIP_SYMBOL_TIMEFRAME)

i_adxLen = input.int(title = LBL_LENGTH, defval = LENGTH_DEFAULT, minval = LENGTH_MIN, maxval = LENGTH_MAX, step = LENGTH_STEP, inline = LBL_LENGTH, group = GRP_INDICATOR)
i_adxSma = input.int(title = LBL_SMOOTHING, defval = SMOOTHING_DEFAULT, minval = SMOOTHING_MIN, maxval = SMOOTHING_MAX, step = SMOOTHING_STEP, inline = LBL_LENGTH, group = GRP_INDICATOR)
i_adxThreshold = input.int(title = LBL_TREND_TH, defval = TREND_TH_DEFAULT, minval = TREND_TH_MIN, maxval = TREND_TH_MAX, step = TREND_TH_STEP, inline = LBL_LENGTH, group = GRP_INDICATOR, tooltip = TIP_DI_SM_TH)

i_adxEntry = input.string(title = LBL_ENTRY_MODE, defval = ENTRY_MODE_DEFAULT, options = [EM_DI, EM_DI_ADX, EM_DI_ADX_INVERT], inline = LBL_ENTRY_MODE, group = GRP_INDICATOR)
i_adxExit = input.string(title = LBL_EXIT_MODE, defval = EXIT_MODE_DEFAULT, options = [XM_DI, XM_ADX], inline = LBL_ENTRY_MODE, group = GRP_INDICATOR, tooltip = TIP_ENTRY_EXIT_MODE)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Signal
i_adxSignalMode = input.string(title = LBL_SIGNAL_MODE, defval = ENTRIES, options = [ALL, ENTRIES_EXITS, ENTRIES, EXITS, ZONE], inline = LBL_SIGNAL_MODE, group = GRP_SIGNAL)
i_adxSignalPeriod = input.int(title = LBL_SIGNAL_PERIOD, defval = SIGNAL_PERIODS_DEFAULT, inline = LBL_SIGNAL_MODE, group = GRP_SIGNAL)
i_adxSignalCount = input.string(title = LBL_SIGNAL_COUNT, defval = SINGLE, options = [SINGLE, EVERY, THS, THE], inline = LBL_SIGNAL_MODE, group = GRP_SIGNAL, tooltip = TIP_SIGNAL_MODE)

i_adxES = input.int(title = LBL_ES, defval = ES_DEFAULT, minval = SIGNAL_MIN, maxval = SIGNAL_MAX, inline = LBL_ES, group = GRP_SIGNAL)
i_adxXL =  input.int(title = LBL_XL, defval = XL_DEFAULT, minval = SIGNAL_MIN, maxval = SIGNAL_MAX, inline = LBL_ES, group = GRP_SIGNAL)
i_adxSHORT_COLOR = input.color(title = LBL_SHORT_COLOR, defval = ADX_COLOR, inline = LBL_ES, group = GRP_SIGNAL)

i_adxEL = input.int(title = LBL_EL, defval = EL_DEFAULT, minval = SIGNAL_MIN, maxval = SIGNAL_MAX, inline = LBL_EL, group = GRP_SIGNAL)
i_adxXS = input.int(title = LBL_XS, defval = XS_DEFAULT, minval = SIGNAL_MIN, maxval = SIGNAL_MAX, inline = LBL_EL, group = GRP_SIGNAL)
i_adxLONG_COLOR = input.color(title = LBL_LONG_COLOR, defval = ADX_COLOR, inline = LBL_EL, group = GRP_SIGNAL)

// === FUNCTIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition zone mode
isZone(_sm) => _sm == ALL or _sm == ZONE

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition entry mode
isEntry(_sm) => _sm == ALL or _sm == ENTRIES_EXITS or _sm == ENTRIES

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition exit mode
isExit(_sm) => _sm == ALL or _sm == ENTRIES_EXITS or _sm == EXITS

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get the weight based on the L, XL, S, XS conditions and add or not the condition weight x bars back (0 = current)   
getWeight(_series, _weight, _signalPeriod, _signalCount) =>
    seriesWeight = 0
    for i = 0 to _signalPeriod by 1
        if _series[i] == true
            seriesWeight +=  _weight
            if _signalCount == SINGLE
                break
    if (_signalCount == THS or _signalCount == THE)
        seriesWeight := (seriesWeight == (_weight * _signalPeriod)) ? _signalCount == THS ? _weight : seriesWeight : 0
    seriesWeight

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Multiply the value with given multiplier
applyMultiplier(_s, _m) => _s * _m

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Threshold the value with given threshold type and value
applyThreshold(_s, _t, _th) => _t == NO_THRESHOLD or _s >= _th ? _s : 0

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Limit the value with given limiter value
applyLimiter(_s, _l) => _s > _l ? _l : _s

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get series where (up or under the candle) to draw the shape based on energy settings
getPlotSeries(_long, _weightLong, _short, _weightShort, _nrg) =>
    plotSeries = _long ? low - ta.tr * math.abs(_weightLong) * _nrg : _short ? high + ta.tr * math.abs(_weightShort) * _nrg : na
    plotSeries

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get color based on brightness settings  
getPlotColor(_long, _weightLong, _colorLong, _short, _weightShort, _colorShort, _bright) =>
    plotColor = _long ? color.new(_colorLong, 100 - math.abs(_weightLong) / SIGNAL_MAX * 100 * _bright) : _short ? color.new(_colorShort, 100 - math.abs(_weightShort) / SIGNAL_MAX * 100 * _bright) : na
    plotColor

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get ticker
getTicker(_symEnabled, _symbol, _candleType) =>
    string _selectedSymbol = _symEnabled ? _symbol : syminfo.tickerid
    string _return = _candleType == HEIKINASHI ? ticker.heikinashi(_selectedSymbol) : _selectedSymbol
    _return  

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Calculate ADX signal weights based on input settings.
adxCalculate(_adxLen, _adxSma, _adxThreshold, _adxEntry, _adxExit, _adxSignalMode) => 
    //Calculate
    [dip, dim, adx] = ta.dmi(_adxLen, _adxSma)    

    //Exits
    isadxLongExitCalc = (_adxExit == XM_DI and dip < dim) or (_adxExit == XM_ADX and adx < adx[1])
    isadxLongExitZone = isadxLongExitCalc and isZone(_adxSignalMode)
    isadxLongExitEntry = isadxLongExitCalc[1] == false and isadxLongExitCalc == true and isEntry(_adxSignalMode)
    isadxLongExitExit = isadxLongExitCalc[1] == true and isadxLongExitCalc == false and isExit(_adxSignalMode)

    isadxShortExitCalc = (_adxExit == XM_DI and dip > dim) or (_adxExit == XM_ADX and adx < adx[1]) 
    isadxShortExitZone = isadxShortExitCalc and isZone(_adxSignalMode)
    isadxShortExitEntry = isadxShortExitCalc[1] == false and isadxShortExitCalc == true and isEntry(_adxSignalMode)
    isadxShortExitExit = isadxShortExitCalc[1] == true and isadxShortExitCalc == false and isExit(_adxSignalMode)

    adxLongExitCalc = isadxLongExitZone or isadxLongExitEntry or isadxLongExitExit
    adxShortExitCalc = isadxShortExitZone or isadxShortExitEntry or isadxShortExitExit

    //Entries
    isadxLongCalc = not adxLongExitCalc and adx > _adxThreshold and ((_adxEntry == EM_DI and dip > dim) or ((_adxEntry == EM_DI_ADX or _adxEntry == EM_DI_ADX_INVERT) and dip > dim and adx > adx[1]) or (_adxEntry == EM_DI_ADX_INVERT and dip < dim and adx < adx[1]))
    isadxLongZone = isadxLongCalc and isZone(_adxSignalMode)
    isadxLongEntry = isadxLongCalc[1] == false and isadxLongCalc == true and isEntry(_adxSignalMode)
    isadxLongExit = isadxLongCalc[1] == true and isadxLongCalc == false and isExit(_adxSignalMode)

    isadxShortCalc = not adxShortExitCalc and adx > _adxThreshold and ((_adxEntry == EM_DI and dip < dim) or ((_adxEntry == EM_DI_ADX or _adxEntry == EM_DI_ADX_INVERT) and dip < dim and adx > adx[1]) or (_adxEntry == EM_DI_ADX_INVERT and dip > dim and adx < adx[1]))
    isadxShortZone = isadxShortCalc and isZone(_adxSignalMode)
    isadxShortEntry = isadxShortCalc[1] == false and isadxShortCalc == true and isEntry(_adxSignalMode)
    isadxShortExit = isadxShortCalc[1] == true and isadxShortCalc == false and isExit(_adxSignalMode)

    adxLongCalc = isadxLongZone or isadxLongEntry or isadxLongExit
    adxShortCalc = isadxShortZone or isadxShortEntry or isadxShortExit
    
    //Return
    [adxLongCalc, adxShortCalc, adxLongExitCalc, adxShortExitCalc]

// ===CALCULATIONS ===

bool adxLong = false
bool adxShort = false
bool adxLongExit = false
bool adxShortExit = false

[_adxLong, _adxShort, _adxLongExit, _adxShortExit] = request.security(getTicker(i_adxSymEnabled, i_adxSymbol, i_adxCandleType), i_adxTimeFrame, adxCalculate(i_adxLen, i_adxSma, i_adxThreshold, i_adxEntry, i_adxExit, i_adxSignalMode))

if i_adxEnabled
    adxLong := _adxLong
    adxShort := _adxShort
    adxLongExit := _adxLongExit
    adxShortExit := _adxShortExit

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Calculate L, XL, S and XS weight values based on trading conditions, input weight settings, how many x bars back and wheter to include the weight for each occurrence or a single occurence.   
signalEL = getWeight(adxLong, i_adxEL, i_adxSignalPeriod, i_adxSignalCount)
signalXL = getWeight(adxLongExit, i_adxXL, i_adxSignalPeriod, i_adxSignalCount)
signalES = getWeight(adxShort, i_adxES, i_adxSignalPeriod, i_adxSignalCount)
signalXS = getWeight(adxShortExit, i_adxXS, i_adxSignalPeriod, i_adxSignalCount) 

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Multiplier
signalEL := applyMultiplier(signalEL, i_signalsMultiplier)
signalXL := applyMultiplier(signalXL, i_signalsMultiplier)
signalES := applyMultiplier(signalES, i_signalsMultiplier)
signalXS := applyMultiplier(signalXS, i_signalsMultiplier)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Threshold
signalEL := applyThreshold(signalEL, i_signalsThresholdType, i_signalsThreshold)
signalXL := applyThreshold(signalXL, i_signalsThresholdType, i_signalsThreshold)
signalES := applyThreshold(signalES, i_signalsThresholdType, i_signalsThreshold)
signalXS := applyThreshold(signalXS, i_signalsThresholdType, i_signalsThreshold)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Limiter
signalEL := applyLimiter(signalEL, i_signalsLimiter)
signalXL := applyLimiter(signalXL, i_signalsLimiter)
signalES := applyLimiter(signalES, i_signalsLimiter)
signalXS := applyLimiter(signalXS, i_signalsLimiter)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Extract passthrough EL, XL, ES and XS signal values from connector
[ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS] = azconnector.extract(i_connector)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Combine output L, XL, S and XS weight values to single number based on input settings
connectorOut = switch i_connectorMode
    BOTH => azconnector.compose(signalEL + ptSignalEL, signalXL + ptSignalXL, signalES + ptSignalES, signalXS + ptSignalXS)
    INDICATOR => azconnector.compose(signalEL, signalXL, signalES, signalXS)
    CONNECTOR => azconnector.compose(ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS)

// === VISUALS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Category Symbol
var indicatorSymbol = CAT_ICON
indicatorPlotSeries = getPlotSeries(signalEL >= i_signalsThreshold, signalEL, signalES >= i_signalsThreshold, signalES, i_indicatorEnergy)
indicatorPlotColor = getPlotColor(signalEL >= i_signalsThreshold, signalEL, LONG_COLOR, signalES >= i_signalsThreshold, signalES, SHORT_COLOR, i_indicatorBrightness)
plotchar(series = indicatorPlotSeries, char = indicatorSymbol, title = "Settings Indicator", location = location.absolute, color = indicatorPlotColor, size = size.small)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Indicator Symbol
adxPlotSeries = i_adxEnabled ? getPlotSeries(adxLong, i_adxEL == 0 ? i_adxXS : i_adxEL, adxShort, i_adxES == 0 ? i_adxXL : i_adxES, i_indicatorEnergy) : na
adxPlotColor = i_adxEnabled ? getPlotColor(adxLong,  i_adxEL == 0 ? i_adxXS : i_adxEL, i_adxLONG_COLOR, adxShort,  i_adxES == 0 ? i_adxXL : i_adxES, i_adxSHORT_COLOR, i_indicatorBrightness) : na
plotchar(series = adxPlotSeries, title = GRP_INDICATOR, char = ADX_ICON, location = location.absolute, color = adxPlotColor, size = size.tiny)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Plot Strategy Connector
plot(connectorOut, title = "Signal connector", display = display.none)
