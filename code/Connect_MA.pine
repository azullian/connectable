// === LICENSE ===

// PROPRIETARY LICENSE AGREEMENT
// All rights reserved.

// DISCLAIMER:
// This script is provided "as-is" without any warranties of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement.
// Azullian will not be liable for any damages or losses arising out of the use or inability to use this script.

// ¬© azullian

// === VERSION ===

//@version=5

// === DECLARATIONS ===

indicator("MA / Connectable [Azullian]", shorttitle="MA / Connectable [Azullian]", overlay=true)

// === IMPORTS ===

import azullian/azLibConnector/1 as azconnector

// === CONSTANTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Timeframe options
var TF00                        = "default"
var TF01                        = "1S"
var TF02                        = "5S"
var TF03                        = "15S"
var TF04                        = "30S"
var TF05                        = "1"
var TF06                        = "3"
var TF07                        = "5"
var TF08                        = "15"
var TF09                        = "30"
var TF10                        = "45"
var TF11                        = "60"
var TF12                        = "120"
var TF13                        = "180"
var TF14                        = "240"
var TF15                        = "1D"
var TF16                        = "5D"
var TF17                        = "1W"
var TF18                        = "1M"
var TF19                        = "3M"
var TF20                        = "12M"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Candle type options
var CANDLE                      = "Candle"
var HEIKINASHI                  = "Heikin Ashi"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Moving Average Type options
var ALMA                        = "ALMA"   // Arnaud Legoux MA
var EMA                         = "EMA"    // Exponential MA
var HMA                         = "HMA"    // Hull MA
var RMA                         = "RMA"    // Wilder MA
var SMA                         = "SMA"    // Simple MA
var SWMA                        = "SWMA"   // Symmetrically-weighted MA
var VWMA                        = "VWMA"   // Volume-weighted MA
var WMA                         = "WMA"    // Weighted MA

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Moving Average Filter options
var LINEDIRECTION               = "Line Direction"
var CANDLEPOSITION              = "Candle Position"
var ANY                         = "Any"
var ALL                         = "All"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Mode options
var START                       = "Start"
var END                         = "End"
var ZONE                        = "Zone"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Count options
var EVERY                       = "Every"
var SINGLE                      = "Single"
var THS                         = "Single+Threshold"
var THE                         = "Every+Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Signal Category Threshold options
var THRESHOLD                   = "Threshold"
var NO_THRESHOLD                = "No Threshold"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Connector Flow options
var BOTH                        = "Both"
var INDICATOR                   = "Indicator Only"
var CONNECTOR                   = "Connector Only"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips - Global settings
var LBL_INDICATOR_ENERGY        = "üó≤Ô∏è"
var LBL_INDICATOR_BRIGHTNESS    = "‚òº"
var TIP_ENERGY_BRIGHTNESS       = "Energy % / Brightness %"

var LBL_CONNECTOR               = "‚Üí"
var LBL_CONNECTOR_MODE          = "‚å•"
var LBL_THRESHOLD_TYPE          = "·ÉÑ"
var TIP_INPUT_FLOW_THRESH       = "Input / Flow / Threshold type"

var LBL_SIGNALS_MULTI           = "‚•Ö"
var LBL_SIGNALS_THRESH          = "‚•á"
var LBL_SIGNALS_LIMIT           = "‚•±"
var TIP_MULTI_THRESH_LIMIT      = "Signals Multiplier / Threshold / Limiter"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Input Labels and Tips
var LBL_ENABLE                  = "Enable"

var LBL_SYMBOL                  = "S"
var LBL_TIMEFRAME               = "T"
var LBL_CANDLETYPE              = "C"
var TIP_SYMBOL_TIMEFRAME        = "S: Symbol / T: Timeframe / C: Candle Type"

var LBL_TYPE                    = "T"
var LBL_LENGTH                  = "L"
var LBL_FILTER                  = "F"
var TIP_TYPE_LENGTH_FILTER      = "T: Type / L: Length / F: Filter"

var LBL_SIGNAL_MODE             = "SM"
var LBL_SIGNAL_PERIOD           = "SP"
var LBL_SIGNAL_COUNT            = "SC"
var TIP_SIGNAL_MODE             = "SM: Signal Mode / SP: Signal Period. # of historical bars to lookup the condition. / SC: Signal Count. Define how to count signals within Signal Period. Single: Count a single condition in period. Every: Count every condition in period. Threshold: Count a single condition if number of conditions in period equal or exceed threshold."

var LBL_EL                      = "EL"
var LBL_XL                      = "XL"
var LBL_ES                      = "ES"
var LBL_XS                      = "XS"

var LBL_LONG_COLOR              = "ü°ë"
var LBL_SHORT_COLOR             = "ü°ì"
var LBL_NEUTRAL_COLOR           = "‚Üï"

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Global settings
var ENERGY_DEFAULT              = 10
var ENERGY_MIN                  = 0
var ENERGY_MAX                  = 100
var ENERGY_STEP                 = 10
var BRIGHTNESS_DEFAULT          = 85
var BRIGHTNESS_MIN              = 0
var BRIGHTNESS_MAX              = 100 
var BRIGHTNESS_STEP             = 5
var MULTIPLIER_DEFAULT          = 1
var THRESHOLD_DEFAULT           = 12
var THRESHOLD_MIN               = 0
var THRESHOLD_MAX               = 499
var LIMITER_DEFAULT             = 499
var LIMITER_MIN                 = 0
var LIMITER_MAX                 = 499
var CONNECTOR_MODE_DEFAULT      = INDICATOR
var SIGNALS_THRES_TYPE_DEFAULT  = NO_THRESHOLD

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Indicator settings
var ENABLE_DEFAULT              = true
var SYMBOL_DEFAULT              = 'BINANCE:BTCUSD'
var TIMEFRAME_DEFAULT           = timeframe.period

// ‚Äî‚Äî‚Äî‚Äî‚Äî Constants: Defaults - Signal weight settings
var SIGNAL_MIN                  = -12
var SIGNAL_MAX                  = 12

var SIGNAL_PERIODS_DEFAULT      = 0
var SIGNAL_PERIODS_MIN          = 0
var SIGNAL_PERIODS_MAX          = 100
var SIGNAL_MODE_DEFAULT         = ZONE
var SIGNAL_COUNT_DEFAULT        = SINGLE

var MA_LENGTH_MIN               = 1
var MA_MULTIPLIER_DEFAULT       = 1
var MA_MULTIPLIER_MIN           = 0
var MA_MULTIPLIER_MAX           = 10

var MA_LENGTH_DEFAULT           = 50
var MA_TYPE_DEFAULT             = SMA

var MA_EL_DEFAULT               = 6
var MA_XL_DEFAULT               = 6
var MA_ES_DEFAULT               = 6
var MA_XS_DEFAULT               = 6

var LONG_COLOR                  = color.rgb(100,169,149)
var SHORT_COLOR                 = color.rgb(145, 40, 81)
var NEUTRAL_COLOR               = color.rgb(212,212,243)

var CAT_ICON                    = "‚ó©"
var INDICATOR_SYMBOL            = CAT_ICON
var INDICATOR_COLOR_LONG        = color.rgb(218, 218, 218)
var INDICATOR_COLOR_SHORT       = color.rgb(145, 40, 81)

// === INPUTS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Visualisation settings
var settingsGroup = "SETTINGS"
i_indicatorEnergy = input.int(title=LBL_INDICATOR_ENERGY, defval=ENERGY_DEFAULT, minval=ENERGY_MIN, maxval=ENERGY_MAX, step=ENERGY_STEP, inline=LBL_INDICATOR_ENERGY, group=settingsGroup) / 100
i_indicatorBrightness = input.int(title=LBL_INDICATOR_BRIGHTNESS, defval=BRIGHTNESS_DEFAULT, minval=BRIGHTNESS_MIN, maxval=BRIGHTNESS_MAX, step=BRIGHTNESS_STEP, inline=LBL_INDICATOR_ENERGY, group=settingsGroup, tooltip=TIP_ENERGY_BRIGHTNESS) / 100

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Connector Settings
i_connector = input.source(title=LBL_CONNECTOR, defval=close, inline=LBL_CONNECTOR, group=settingsGroup)
i_connectorMode = input.string(title=LBL_CONNECTOR_MODE, defval=CONNECTOR_MODE_DEFAULT, options=[BOTH, INDICATOR, CONNECTOR], inline=LBL_CONNECTOR, group=settingsGroup)
i_signalsThresholdType = input.string(title=LBL_THRESHOLD_TYPE, defval=SIGNALS_THRES_TYPE_DEFAULT, options=[NO_THRESHOLD, THRESHOLD], inline=LBL_CONNECTOR, group=settingsGroup, tooltip=TIP_INPUT_FLOW_THRESH)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Category Settings
i_signalsMultiplier = input.int(title=LBL_SIGNALS_MULTI, defval=MULTIPLIER_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup)
i_signalsThreshold = input.int(title=LBL_SIGNALS_THRESH, defval=THRESHOLD_DEFAULT, minval=THRESHOLD_MIN, maxval=THRESHOLD_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup)
i_signalsLimiter = input.int(title=LBL_SIGNALS_LIMIT, defval=LIMITER_DEFAULT, minval=LIMITER_MIN, maxval=LIMITER_MAX, inline=LBL_SIGNALS_MULTI, group=settingsGroup, tooltip=TIP_MULTI_THRESH_LIMIT)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Inputs: Indicator inputs
var maGroup = "MA - Moving Average"
i_maEnabled = input.bool(title=LBL_TYPE, defval=ENABLE_DEFAULT, inline=LBL_TYPE, group=maGroup)
i_maType = input.string(title="", defval=MA_TYPE_DEFAULT, options=[ALMA, EMA, HMA, RMA, SMA, SWMA, VWMA, WMA], inline=LBL_TYPE, group=maGroup)
i_maLength = input.int(title=LBL_LENGTH, defval=MA_LENGTH_DEFAULT, minval=MA_LENGTH_MIN, inline=LBL_TYPE, group=maGroup)
i_maFilter = input.string(title=LBL_FILTER, defval=ALL, options=[LINEDIRECTION, CANDLEPOSITION, ANY, ALL], inline=LBL_TYPE, group=maGroup, tooltip=TIP_TYPE_LENGTH_FILTER)

i_maSymbolEnabled = input.bool(title=LBL_SYMBOL, defval=false, inline=LBL_SYMBOL, group=maGroup)
i_maSymbol = input.symbol(SYMBOL_DEFAULT, title="", inline=LBL_SYMBOL, group=maGroup)
i_maTimeFrameTmp = input.timeframe(defval=TF00, title=LBL_TIMEFRAME, options=[TF00, TF01, TF02, TF03, TF04, TF05, TF06, TF07, TF08, TF09, TF10, TF11, TF12, TF13, TF14, TF15, TF16, TF17, TF18, TF19, TF20], inline=LBL_SYMBOL, group=maGroup) 
i_maTimeFrame = i_maTimeFrameTmp == TF00 ? TIMEFRAME_DEFAULT : i_maTimeFrameTmp
i_maCandleType = input.string(defval=CANDLE, title=LBL_CANDLETYPE, options=[CANDLE, HEIKINASHI], inline=LBL_SYMBOL, group=maGroup, tooltip=TIP_SYMBOL_TIMEFRAME)

var maGroupWeight = "SIGNAL WEIGHTS AND CONDITIONS"
i_maSignalMode = input.string(title=LBL_SIGNAL_MODE, defval=SIGNAL_MODE_DEFAULT, options=[START, END, ZONE], inline=LBL_SIGNAL_MODE, group=maGroupWeight)
i_maSignalPeriod = input.int(title=LBL_SIGNAL_PERIOD, defval=SIGNAL_PERIODS_DEFAULT, minval=SIGNAL_PERIODS_MIN, maxval=SIGNAL_PERIODS_MAX, inline=LBL_SIGNAL_MODE, group=maGroupWeight)
i_maSignalCount = input.string(title=LBL_SIGNAL_COUNT, defval=SIGNAL_COUNT_DEFAULT, options=[SINGLE, EVERY, THS, THE], inline=LBL_SIGNAL_MODE, group=maGroupWeight, tooltip=TIP_SIGNAL_MODE)

i_maES = input.int(title=LBL_ES, defval=MA_ES_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_ES, group=maGroupWeight)
i_maXL = input.int(title=LBL_XL, defval=MA_XL_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_ES, group=maGroupWeight)
i_maColorShort = input.color(title=LBL_SHORT_COLOR, defval=SHORT_COLOR, inline=LBL_ES, group=maGroupWeight)

i_maEL = input.int(title=LBL_EL, defval=MA_EL_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_EL, group=maGroupWeight)
i_maXS = input.int(title=LBL_XS, defval=MA_XS_DEFAULT, minval=SIGNAL_MIN, maxval=SIGNAL_MAX, inline=LBL_EL, group=maGroupWeight)
i_maColorLong = input.color(title=LBL_LONG_COLOR, defval=LONG_COLOR, inline=LBL_EL, group=maGroupWeight)

var visualsGroup = "VISUALS"
i_maPlotByWeight = input.bool(title="Plot by weight", defval=false, group=visualsGroup, tooltip="Plot the trendlines based on given weights")

// === FUNCTIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get ticker
getTicker(_symbolEnabled, _symbol, _candleType) =>
    string _selectedSymbol = _symbolEnabled ? _symbol : syminfo.tickerid
    string _return = _candleType == HEIKINASHI ? ticker.heikinashi(_selectedSymbol) : _selectedSymbol
    _return 

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition zone mode
isZone(_sm) => _sm == ZONE

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition start mode
isStart(_sm) => _sm == START

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Check is in condition end mode
isEnd(_sm) => _sm == END

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get the weight based on the L, XL, S, XS conditions and add or not the condition weight x bars back (0 = current)   
getWeight(_series, _weight, _signalPeriod, _signalCount) =>
    seriesWeight = 0
    for i = 0 to _signalPeriod by 1
        if _series[i] == true
            seriesWeight += _weight
            if _signalCount == SINGLE
                break
    if (_signalCount == THS or _signalCount == THE)
        seriesWeight := (seriesWeight == (_weight * _signalPeriod)) ? _signalCount == THS ? _weight : seriesWeight : 0
    seriesWeight

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Multiply the value with given multiplier
applyMultiplier(_s, _m) => _s * _m

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Threshold the value with given threshold type and value
applyThreshold(_s, _t, _th) => _t == NO_THRESHOLD or _s >= _th ? _s : 0

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Limit the value with given limiter value
applyLimiter(_s, _l) => _s > _l ? _l : _s

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get series where (up or under the candle) to draw the shape based on energy settings
getPlotSeries(_long, _weightLong, _short, _weightShort, _nrg) =>
    plotSeries = _long ? low - ta.tr * math.abs(_weightLong) * _nrg : _short ? high + ta.tr * math.abs(_weightShort) * _nrg : na
    plotSeries

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get color based on brightness settings  
getPlotColor(_long, _weightLong, _colorLong, _short, _weightShort, _colorShort, _colorNeutral, _bright, _weightedColor) =>
    plotColor = _weightedColor ? _long ? color.new(_colorLong, 100 - math.abs(_weightLong) / SIGNAL_MAX * 100 * _bright) : _short ? color.new(_colorShort, 100 - math.abs(_weightShort) / SIGNAL_MAX * 100 * _bright) : color.new(_colorNeutral, 100 / SIGNAL_MAX * 100 * _bright) : _long ? color.new(_colorLong, 100 - 100 * _bright) : _short ? color.new(_colorShort, 100 - 100 * _bright) : color.new(_colorNeutral, 100 - 100 * _bright)
    plotColor

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get moving average for chosen type
ma(_s, _t, _l) =>
    float _r = switch _t
        ALMA => ta.alma(_s, _l, 0.85, 6)
        EMA => ta.ema(_s, _l) 
        HMA => ta.hma(_s, _l)
        RMA => ta.rma(_s, _l)
        SMA => ta.sma(_s, _l) 
        SWMA => ta.swma(_s)
        VWMA => ta.vwma(_s, _l)
        WMA => ta.wma(_s, _l) 
        => _s

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get ma direction
getMaDirection(_ma) =>
    maDirection = _ma > _ma[1] ? 1 : _ma < _ma[1] ? -1 : 0

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get ma candle position
getMaCandlePosition(_ma) =>
    maCandlePosition = close > _ma ? 1 : close < _ma ? -1 : 0

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Get ma bullish, bearish or neutral
getMaBullishBearish(_filter, _direction, _candlePosition, _eq) =>
    isBullishBearish = (_filter == LINEDIRECTION and _direction == _eq) or (_filter == CANDLEPOSITION and _candlePosition == _eq) or (_filter == ANY and (_direction == _eq or _candlePosition == _eq)) or (_filter == ALL and _direction == _eq and _candlePosition == _eq)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Function: Calculate ma bullish, bearish or neutral
maCalculate(_enabled, _ma, _maFilter, _bumaSignalMode, _bemaSignalMode) =>
    maDirection = getMaDirection(_ma)
    maCandlePostion = getMaCandlePosition(_ma)

    maBullishCalc = getMaBullishBearish(_maFilter, maDirection, maCandlePostion, 1) and _enabled
    maBullishZone = maBullishCalc and isZone(_bumaSignalMode)
    maBullishEntry = maBullishCalc[1] == false and maBullishCalc == true and isStart(_bumaSignalMode)
    maBullishExit = maBullishCalc[1] == true and maBullishCalc == false and isEnd(_bumaSignalMode)
    maBearishCalc = getMaBullishBearish(_maFilter, maDirection, maCandlePostion, -1) and _enabled
    maBearishZone = maBearishCalc and isZone(_bemaSignalMode)
    maBearishEntry = maBearishCalc[1] == false and maBearishCalc == true and isStart(_bemaSignalMode)
    maBearishExit = maBearishCalc[1] == true and maBearishCalc == false and isEnd(_bemaSignalMode)   

    maBullishC = maBullishZone or maBullishEntry or maBullishExit
    maBearishC = maBearishZone or maBearishEntry or maBearishExit

    [maBullishC, maBearishC]

// === CALCULATIONS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Get MA for selected type, symbol, timeframe, ...
ma = request.security(getTicker(i_maSymbolEnabled, i_maSymbol, i_maCandleType), i_maTimeFrame, ma(close, i_maType, i_maLength))

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Get MA bullish / bearish indications
[maBullish, maBearish] = maCalculate(i_maEnabled, ma, i_maFilter, i_maSignalMode, i_maSignalMode)
    
// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Calculate L, XL, S and XS weight values based on trading conditions, input weight settings, how many x bars back and wheter to include the weight for each occurrence or a single occurence.   
signalEL = getWeight(maBullish, i_maEL, i_maSignalPeriod, i_maSignalCount)
signalXL = getWeight(maBearish, i_maXL, i_maSignalPeriod, i_maSignalCount)
signalES = getWeight(maBearish, i_maES, i_maSignalPeriod, i_maSignalCount)
signalXS = getWeight(maBullish, i_maXS, i_maSignalPeriod, i_maSignalCount)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Multiplier
signalEL := applyMultiplier(signalEL, i_signalsMultiplier)
signalXL := applyMultiplier(signalXL, i_signalsMultiplier)
signalES := applyMultiplier(signalES, i_signalsMultiplier)
signalXS := applyMultiplier(signalXS, i_signalsMultiplier)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Threshold
signalEL := applyThreshold(signalEL, i_signalsThresholdType, i_signalsThreshold)
signalXL := applyThreshold(signalXL, i_signalsThresholdType, i_signalsThreshold)
signalES := applyThreshold(signalES, i_signalsThresholdType, i_signalsThreshold)
signalXS := applyThreshold(signalXS, i_signalsThresholdType, i_signalsThreshold)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Apply category weight settings - Limiter
signalEL := applyLimiter(signalEL, i_signalsLimiter)
signalXL := applyLimiter(signalXL, i_signalsLimiter)
signalES := applyLimiter(signalES, i_signalsLimiter)
signalXS := applyLimiter(signalXS, i_signalsLimiter)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Extract passthrough EL, XL, ES and XS signal values from connector
[ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS] = azconnector.extract(i_connector)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Calculations: Combine output L, XL, S and XS weight values to single number based on input settings
connectorOut = switch i_connectorMode
    BOTH => azconnector.compose(signalEL + ptSignalEL, signalXL + ptSignalXL, signalES + ptSignalES, signalXS + ptSignalXS)
    INDICATOR => azconnector.compose(signalEL, signalXL, signalES, signalXS)
    CONNECTOR => azconnector.compose(ptSignalEL, ptSignalXL, ptSignalES, ptSignalXS)

// == VISUALS ===

// ‚Äî‚Äî‚Äî‚Äî‚Äî Visuals: Plot Moving Average Lines by Signal Weight
maPlotColor = i_maEnabled ? getPlotColor(maBullish, i_maEL, i_maColorLong, maBearish, i_maES, i_maColorShort, NEUTRAL_COLOR, i_indicatorBrightness, i_maPlotByWeight) : na

plot(i_maEnabled ? ma : na, color=maPlotColor, title="MA", style=plot.style_line, linewidth=3)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Visuals: Plot Category Signal
indicatorPlotSeries = getPlotSeries(signalEL >= i_signalsThreshold, signalEL, signalES >= i_signalsThreshold, signalES, i_indicatorEnergy)
indicatorPlotColor = getPlotColor(signalEL >= i_signalsThreshold, signalEL, INDICATOR_COLOR_LONG, signalES >= i_signalsThreshold, signalES, INDICATOR_COLOR_SHORT, NEUTRAL_COLOR, i_indicatorBrightness, true)
plotchar(series=indicatorPlotSeries, char=INDICATOR_SYMBOL, title="Category Indicator", location=location.absolute, color=indicatorPlotColor, size=size.small, display=display.none)

// ‚Äî‚Äî‚Äî‚Äî‚Äî Visuals: Plot Strategy Connector
plot(connectorOut, title='Signal connector', display=display.none)